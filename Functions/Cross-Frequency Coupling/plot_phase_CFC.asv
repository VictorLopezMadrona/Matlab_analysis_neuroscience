function plot_phase_CFC(comodulogram,freq_phase)

%% Plot the phase distribution of the comodulogram for a given frequency
%
% USE:
%   plot_phase_CFC(comodulogram,freq_phase);
%
% INPUT:
%   comodulogram = output of computeCFC
%   freq_phase   = frequency for the phase to plot
%
% OUTPUT:
%
%
% See also: computeCFC comodulogram_ft

% Author: Victor Lopez Madrona <v.lopez.madrona@gmail.com>
% License: BSD (3-clause)
% Apr. 2016; Last revision: 01-Aug-2024

%% Phase distribution plot

%Extract the information from the struct
f_min_theta = comodulogram.f_theta.f_min;
f_max_theta = comodulogram.f_theta.f_max;
step_theta  = comodulogram.f_theta.step;
f_min_gamma = comodulogram.f_gamma.f_min;
f_max_gamma = comodulogram.f_gamma.f_max;
CFC         = comodulogram.CFC;
MI          = comodulogram.MI;

[ly,~]=size(MI);
y=[f_min_gamma f_max_gamma];

[~,~,bins]=size(CFC);
%xx=f_min_theta:step_theta:f_max_theta;
x=[f_min_theta f_max_theta];
y=[f_min_gamma f_max_gamma];
xx=linspace(x(1),x(2),size(CFC,2));
yy=linspace(y(1),y(2),size(CFC,1));
x_phase=find(xx>=freq_phase,1);

CFC_plot=zeros(ly,bins);
CFC_plot(:,:)=CFC(:,x_phase,:);
    
clear CFC_180
CFC_180(:,1:bins/2)=CFC_plot(:,bins/2+1:end);
CFC_180(:,bins/2+1:bins)=CFC_plot(:,1:bins/2);
CFC_180(:,bins+1:bins*2)=CFC_180;

%Normalize
for i=1:ly
   CFC_180(i,:)=(CFC_180(i,:)-mean(CFC_180(i,:))); %substract the mean
   %CFC_180(i,:)=zscore(CFC_180(i,:)); %z-score of each line
end

figure,
imagesc_filter(CFC_180,4,[0 720],y);
yy=linspace(y(1),y(2),size(CFC_180,1));
xx=linspace(y(1),y(2),size(CFC_180,2));
[~,fig_cfc]=contourf(xx,yy,CFC_180); 

%Seno
x_sin=0:0.01:4*pi;
x_frec_sin=(1:1257)*720/1257;
A_sin=(max(y)-min(y))/8;
V=max(y)-A_sin;

colormap('jet')
h=colorbar;
set(get(h,'title'),'string','Norm. amplitude');
hold on
plot(x_frec_sin,V+A_sin*sin(x_sin+pi/2),'k')
xlabel('Phase (degrees)')
ylabel('Amplitude frequency (Hz)')

end

function fig_cfc=imagesc_filter(im_in,smooth,x_axis,y_axis)

%
% Plot a smooth image increasing the number of pixels and filtering with a 
% low-pass.
%
% USE:
%    imagesc_filter(im_in,smooth,x,y)
%
% INPUT:
%    im_in: matrix (MxN) with the image to plot.
%    smooth: Integer with the intensity of the smooth (Default = 0 -no smooth).
%    x,y (Optional): picture axis with format x=[x_min x_max].

% Author: Victor Lopez Madrona <v.lopez.madrona@gmail.com>
% License: BSD (3-clause)
% Jun. 2016; Last revision: 14-Jul-2020

if nargin ==1
    n = 0;
elseif nargin==2
    n = smooth;
    [X,Y]=size(im_in);
    y_axis=[0 X];
    x_axis=[0 Y];
elseif nargin>2
    n = smooth;
end

if n==0
    imagesc(im_in)
    return
end

h=1/9*[1 1 1; 1 1 1; 1 1 1];
M_pre=max(max(im_in));
im_in=imfilter(imfilter(im_in,h),h);
M_post=max(max(im_in));
im_in=im_in*M_pre/M_post;

[X,Y]=size(im_in);
im_out=zeros(X*n,Y*n);

for x=1:X
    for y=1:Y
        im_out((x-1)*n+1:x*n, (y-1)*n+1:y*n) = im_in(x,y);
    end
end

IM_f=imfilter(imfilter(im_out,h),h);

xx=linspace(x_axis(1),x_axis(2),X*4);
yy=linspace(y_axis(1),y_axis(2),Y*4);
fig_cfc=imagesc(xx,yy,IM_f); axis('xy');

end
